- name: Deploy Spring PetClinic Without Docker
  hosts: local_vm
  become: true

  tasks:
    - name: Add Java 17 repository
      apt_repository:
        repo: ppa:openjdk-r/ppa
        state: present

    - name: Install Java 17
      become: yes
      block:
        - name: Update apt cache
          apt:
            update_cache: yes
            cache_valid_time: 3600
            force_apt_get: yes
          register: apt_update
          retries: 3
          delay: 10
          until: apt_update is success

        - name: Install Java 17
          apt:
            name: openjdk-17-jdk
            state: present
            force_apt_get: yes
          retries: 3
          delay: 10

    - name: Install Git
      package:
        name: git
        state: present

    - name: Clone your repo
      ansible.builtin.git:
        repo: https://github.com/dorryspears/spring-petclinic-group-project.git
        dest: /opt/spring-petclinic
        version: main

    - name: Make Maven wrapper executable
      ansible.builtin.file:
        path: /opt/spring-petclinic/mvnw
        mode: '0755'

    - name: Build the application
      ansible.builtin.shell: ./mvnw clean package
      args:
        chdir: /opt/spring-petclinic

    - name: Check if application is already running
      shell: pgrep -f "java -jar target/*.jar" || echo "not running"
      register: app_status
      changed_when: false
      
    - name: Stop existing application if running
      shell: pkill -f "java -jar target/*.jar" || echo "No process to kill"
      when: app_status.stdout != "not running"
      
    - name: Wait for process to stop
      wait_for:
        path: "/proc/{{ app_status.stdout }}"
        state: absent
      when: app_status.stdout != "not running"
      ignore_errors: yes
      
    - name: Run the application
      ansible.builtin.shell: |
        nohup java -jar target/*.jar > /opt/spring-petclinic/app.log 2>&1 &
        echo $! > /opt/spring-petclinic/app.pid
      args:
        chdir: /opt/spring-petclinic
        
    - name: Wait for application to start
      wait_for:
        port: 8080
        timeout: 60
        
    - name: Check application status
      uri:
        url: http://localhost:8080
        return_content: yes
      register: webpage
      retries: 5
      delay: 10
      until: webpage.status == 200

- name: Deploy Docker and Jenkins Container
  hosts: jenkins_vm
  become: true

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Install Docker Python package
      pip:
        name: docker

    - name: Add jenkins user to docker group
      user:
        name: jenkins
        groups: docker
        append: yes

    - name: Create Jenkins network
      docker_network:
        name: jenkins
        state: present

    - name: Pull Jenkins Docker image
      docker_image:
        name: jenkins/jenkins:2.492.2-jdk17
        source: pull

    - name: Run Jenkins container
      docker_container:
        name: jenkins
        image: jenkins/jenkins:2.492.2-jdk17
        state: started
        restart_policy: always
        ports:
          - "8080:8080"
          - "50000:50000"
        networks:
          - name: jenkins
        volumes:
          - jenkins_home:/var/jenkins_home
